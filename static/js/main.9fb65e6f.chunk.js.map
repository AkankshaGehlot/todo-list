{"version":3,"sources":["components/Todo.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todoList","length","map","todo","className","key","id","onClick","title","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","console","log","prevProps","prevState","onSubmit","this","htmlFor","type","onChange","Component","App","newTodos","filter","Math","random","axios","get","then","resolve","data","slice","Todo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mRAmBeA,G,MAjBD,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,WAEbC,EAAWF,EAAMG,OAASH,EAAMI,KAAK,SAAAC,GACvC,OACI,yBAAKC,UAAY,kBAAkBC,IAAOF,EAAKG,IAC3C,0BAAMF,UAAW,YAAYG,QAAU,WAAOR,EAAWI,EAAKG,MAAOH,EAAKK,WAGhF,uBAAGJ,UAAU,mBAAb,kCAEN,OACI,yBAAKA,UAAU,oBACVJ,KC4BES,E,4MAvCXC,MAAQ,CACJF,MAAO,I,EAGXG,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVL,MAAOI,EAAEE,OAAOC,S,EAIxBC,aAAe,SAACJ,GACZA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACVL,MAAO,M,kEAKXY,QAAQC,IAAI,4D,yCAGGC,EAAWC,GAC1BH,QAAQC,IAAI,2D,+BAKZ,OADAD,QAAQC,IAAI,uBAER,6BACI,0BAAMG,SAAYC,KAAKT,cACnB,2BAAOU,QAAU,YAAjB,YACA,2BAAOpB,GAAG,WAAWqB,KAAK,OAAOC,SAAUH,KAAKd,aAAcI,MAAOU,KAAKf,MAAMF,c,GAjC9EqB,a,iBCmEPC,E,4MA7DbpB,MAAQ,CACNZ,MAAO,I,EAwBTC,WAAa,SAACO,GACZ,IAAIyB,EAAW,EAAKrB,MAAMZ,MAAMkC,QAAQ,SAAA7B,GACtC,OAAOA,EAAKG,KAAOA,KAGrB,EAAKO,SAAS,CACZf,MAAOiC,K,EAIXZ,QAAU,SAAChB,GACTA,EAAKG,GAAK2B,KAAKC,SAEf,IAAIpC,EAAK,sBAAO,EAAKY,MAAMZ,OAAlB,CAAyBK,IAElC,EAAKU,SAAS,CACZf,MAAOA,K,kEAjCS,IAAD,OACjBsB,QAAQC,IAAI,+BACZc,IAAMC,IAAI,8CACPC,MAAK,SAAAC,GACJlB,QAAQC,IAAIiB,EAAQC,MACpB,EAAK1B,SAAS,CACZf,MAAOwC,EAAQC,KAAKC,MAAM,EAAG,W,yCAMlBlB,EAAWC,GAC5BH,QAAQC,IAAI,2BAA4BC,EAAWC,GACnDH,QAAQC,IAAI,cAAeI,KAAKf,S,+BA2BhC,OADAU,QAAQC,IAAI,qBAEV,yBAAKjB,UAAU,sBACb,wBAAIA,UAAY,sBAAhB,iBACA,kBAACqC,EAAD,CAAO3C,MAAS2B,KAAKf,MAAMZ,MAAOC,WAAY0B,KAAK1B,aACnD,kBAAC,EAAD,CAASoB,QAAWM,KAAKN,e,GAvDfU,aCMEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.9fb65e6f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Todos = ({todos, deleteTodo}) =>{\r\n\r\n    const todoList = todos.length ? todos.map( todo => {\r\n        return(\r\n            <div className = 'collection-item' key = {todo.id}>\r\n                <span className= 'blue-text' onClick={ () => {deleteTodo(todo.id)}}>{todo.title}</span>\r\n            </div>\r\n        )\r\n    }) : (<p className='center red-text'>You don't have any Todo Left!!</p>)\r\n\r\n    return(\r\n        <div className='todos collection'>\r\n            {todoList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todos;\r\n","import React, {Component} from 'react';\r\n\r\nclass AddTodo extends Component{\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    handleChange = (e) =>{\r\n        this.setState({\r\n            title: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state);\r\n        this.setState({\r\n            title: ''\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log('Hi from Form component:::: I am in the mounting phase!');\r\n      }\r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        console.log('Hi from Form component:::: I am in the updating phase');\r\n    }\r\n\r\n    render(){\r\n        console.log('rendering form.....');\r\n        return(\r\n            <div>\r\n                <form onSubmit = {this.handleSubmit}>\r\n                    <label htmlFor = 'add-todo'>Add item</label>\r\n                    <input id='add-todo' type='text' onChange={this.handleChange} value={this.state.title}/> \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo;","import React, {Component} from 'react';\nimport './App.css';\nimport Todos from './components/Todo';\nimport AddTodo from './components/AddTodo';\nimport axios from 'axios';\n\nclass App extends Component {\n\n  state = {\n    todos: [\n      // {id: 1, item: 'Buy Bread'},\n      // {id: 2, item: 'Learn to play Guitar'}\n    ]\n    \n  }\n\n  componentDidMount(){\n    console.log('I am in the mounting phase!');\n    axios.get('https://jsonplaceholder.typicode.com/todos')\n      .then(resolve =>{\n        console.log(resolve.data);\n        this.setState({\n          todos: resolve.data.slice(0, 10)\n        })\n      })\n  \n  }\n\n  componentDidUpdate(prevProps, prevState){\n    console.log('I am in updating phase!!', prevProps, prevState);\n    console.log('new state: ', this.state);\n  }\n\n  deleteTodo = (id) =>{\n    let newTodos = this.state.todos.filter( todo =>{\n      return todo.id !== id\n    });\n\n    this.setState({\n      todos: newTodos\n    })\n  }\n\n  addTodo = (todo) =>{\n    todo.id = Math.random();\n\n    let todos = [...this.state.todos, todo];\n\n    this.setState({\n      todos: todos\n    })\n  }\n\n  \n\n  render(){\n    console.log('rendering app.js ');\n    return (\n      <div className=\"todo-app container\">\n        <h3 className = 'center purple-text'>My Todo List!</h3>\n        <Todos todos = {this.state.todos} deleteTodo={this.deleteTodo}></Todos>\n        <AddTodo addTodo = {this.addTodo}></AddTodo>\n      </div>\n    );\n\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}